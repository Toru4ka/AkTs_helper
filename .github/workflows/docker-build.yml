name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]

jobs:
  build:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read version from VERSION file
        id: read_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t toru4ka/akts_helper:${{ env.VERSION }} --push .

  deploy:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read version from VERSION file
        id: read_version
        run: |
          VERSION=$(cat VERSION)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Docker container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Define container name
            CONTAINER_NAME="akts_helper"
            IMAGE_NAME="toru4ka/akts_helper:${{ env.VERSION }}"

            # Stop and remove old container if it exists
            if [ \$(docker ps -aq -f name=\$CONTAINER_NAME) ]; then
              echo "Stopping and removing old container..."
              docker stop \$CONTAINER_NAME
              docker rm \$CONTAINER_NAME
            fi

            # Start a new container with the updated image
            echo "Starting new container..."
            docker run -d --name \$CONTAINER_NAME -p 8080:8080 \$IMAGE_NAME

            # Optional: list all containers for verification
            echo "Listing running containers:"
            docker ps
          EOF
