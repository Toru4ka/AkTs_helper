name: Triggered Build and Deploy Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
  workflow_dispatch:       # <- добавили ручной триггер

jobs:
  build:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read version
        id: read_version
        run: |
          # если передан input.version, используем его, иначе — из файла
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t toru4ka/akts_helper:${{ env.VERSION }} \
            --push .

  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged) || github.event_name == 'workflow_dispatch'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read version
        id: read_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
          fi

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy Docker container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            CONTAINER_NAME="akts_helper"
            IMAGE_NAME="toru4ka/akts_helper:${{ env.VERSION }}"

            if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
              docker stop "$CONTAINER_NAME"
              docker rm "$CONTAINER_NAME"
            elif docker ps -aq -f name="$CONTAINER_NAME" | grep -q .; then
              docker rm "$CONTAINER_NAME"
            fi

            docker run -d --name "$CONTAINER_NAME" -p 8080:8080 \
              -e VENERA_LOGIN=${{ secrets.VENERA_LOGIN }} \
              -e VENERA_PASSWORD=${{ secrets.VENERA_PASSWORD }} \
              "$IMAGE_NAME"
          EOF
